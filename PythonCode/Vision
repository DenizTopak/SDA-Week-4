import cv2

# Define the initial cropping coordinates
x1, y1, x2, y2 = 115, 135, 385, 475

selected_shape_info = None

# Function to detect and identify objects in the frame
def detect_objects(frame, x1, y1, x2, y2):
    # Crop the frame using the specified coordinates
    cropped_frame = frame[y1:y2, x1:x2]

    # Convert the cropped frame to grayscale
    gray = cv2.cvtColor(cropped_frame, cv2.COLOR_BGR2GRAY)

    # Apply Gaussian blur to reduce noise
    blurred = cv2.GaussianBlur(gray, (5, 5), 0)

    # Detect edges using Canny edge detector
    edges = cv2.Canny(blurred, 50, 150)

    # Find contours in the edge map
    contours, _ = cv2.findContours(edges.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # List to store center points and shape
    center_points = []

    # Iterate through detected contours
    for contour in contours:
        # Approximate the contour to determine its shape
        epsilon = 0.04 * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)

        # Get the centroid of the contour
        M = cv2.moments(contour)
        if M["m00"] != 0:
            cx = int(M["m10"] / M["m00"])
            cy = int(M["m01"] / M["m00"])

            # Determine the color at the centroid
            color = cropped_frame[cy, cx]
            color_name = ""
            if color[1] > 100 and color[2] < 100 and color[0] < 200:  # Green
                color_name = "Green"
            elif color[2] > 180 and color[1] > 180:  # Yellow
                color_name = "Yellow"
            elif color[0] > 200:  # Blue
                color_name = "Blue"
            else:
                color_name = "Red"

            # Identify the shape based on the number of sides
            if len(approx) == 3:
                shape = "Triangle"
            elif len(approx) == 4:
                shape = "Square"
            else:
                shape = "Circle"

            object_info = f"{shape}: {color_name} - Coordinates: ({cx}, {cy})"
            center_points.append((cx, cy, shape, color_name, object_info))

            # Draw the shape and color text on the cropped frame
            text_color = (255, 255, 255)
            cv2.putText(cropped_frame, object_info, (cx - 50, cy - 50), cv2.FONT_HERSHEY_SIMPLEX, 0.5, text_color, 2)

            # Draw a contour around the detected shape on the cropped frame
            cv2.drawContours(cropped_frame, [approx], -1, (0, 255, 0), 2)

            # Draw a circle at the centroid on the cropped frame
            cv2.circle(cropped_frame, (cx, cy), 5, (0, 0, 255), -1)

    return cropped_frame, center_points

# Create a VideoCapture object for the camera (camera index 0 for built-in camera)
cap = cv2.VideoCapture(0)

# Check if the camera was opened successfully
if not cap.isOpened():
    print("Error: Could not open the camera.")
    exit()

# Define a callback function for mouse events
def on_mouse(event, x, y, flags, param):
    global selected_shape_info
    if event == cv2.EVENT_LBUTTONDOWN:
        for i, (cx, cy, shape, color_name, object_info) in enumerate(center_points):
            if abs(x - cx) < 10 and abs(y - cy) < 10:
                selected_shape_info = f"Selected Object {i + 1}: {object_info}"
                print(selected_shape_info)

cv2.namedWindow("Object Detection")
cv2.setMouseCallback("Object Detection", on_mouse)

while True:
    # Read a frame from the camera
    ret, frame = cap.read()

    # Detect and identify objects in the frame and crop it
    cropped_frame, center_points = detect_objects(frame, x1, y1, x2, y2)

    # Display the cropped frame with detected objects and their colors
    cv2.imshow('Object Detection', cropped_frame)

    # Check for a key press to adjust the cropping region (press 'c' key)
    key = cv2.waitKey(1) & 0xFF
    if key == ord('c'):
        # Allow the user to adjust the cropping coordinates
        x1, y1, x2, y2 = cv2.selectROI('Object Detection', cropped_frame, fromCenter=False, showCrosshair=True)
        # Adjust the coordinates to the cropped frame's coordinates
        x1 += 115
        y1 += 135
        x2 += 115
        y2 += 135
    # Check for a key press to exit the loop (press 'q' key)
    elif key == ord('q'):
        break

# Release the VideoCapture object and close any OpenCV windows
cap.release()
cv2.destroyAllWindows()
